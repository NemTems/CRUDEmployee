openapi: 3.0.1
info:
  title: CATS Management Service API
  version: v1
servers:
- url: http://localhost:8080/
  description: Local server
paths:
  /api/employee/{id}/update:
    put:
      tags:
      - Employee API
      operationId: updateEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeDTO"
  /api/employee/{id}/remove/subordinates:
    put:
      tags:
      - Employee API
      operationId: removeSubordinateFromEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/EmployeeDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeDTO"
  /api/employee/{id}/add/subordinates:
    put:
      tags:
      - Employee API
      operationId: addSubordinatesToEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/EmployeeDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeDTO"
  /api/department/{id}/update:
    put:
      tags:
      - Department API
      operationId: updateDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DepartmentDTO"
  /api/department/{id}/remove/employees:
    put:
      tags:
      - Department API
      operationId: removeEmployeesFromDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/EmployeeDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DepartmentDTO"
  /api/department/{id}/add/employees:
    put:
      tags:
      - Department API
      operationId: addEmployeesToDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/EmployeeDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DepartmentDTO"
  /api/employee/create:
    post:
      tags:
      - Employee API
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmployeeDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeDTO"
  /api/department/create:
    post:
      tags:
      - Department API
      operationId: createDepartment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepartmentDTO"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/DepartmentDTO"
  /api/employee/{id}:
    get:
      tags:
      - Employee API
      operationId: showEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/EmployeeDTO"
  /api/employee/showAll:
    get:
      tags:
      - Employee API
      operationId: showAllEmployees
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EmployeeDTO"
  /api/department/{id}:
    get:
      tags:
      - Department API
      summary: Shows all departments from data base
      description: Responsible of fetching all departments that is stored in data
        base
      operationId: showDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Success
        "400":
          description: Fail
  /api/department/showAll:
    get:
      tags:
      - Department API
      summary: Shows all departments from data base
      description: Responsible of fetching all departments that is stored in data
        base
      operationId: showAllDepartments
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DepartmentDTO"
  /api/employee/{id}/delete:
    delete:
      tags:
      - Employee API
      operationId: deleteEmployee
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
  /api/department/{id}/delete:
    delete:
      tags:
      - Department API
      operationId: deleteDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
components:
  schemas:
    EmployeeDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        operational_head:
          type: boolean
        direct_supervisor_id:
          type: integer
          format: int32
        department_id:
          type: integer
          format: int32
    DepartmentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        cost_center_code:
          type: string
        employees:
          type: array
          items:
            $ref: "#/components/schemas/EmployeeDTO"
