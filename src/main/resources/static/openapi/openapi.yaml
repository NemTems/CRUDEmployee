openapi: 3.0.1
info:
  title: CATS Management Service API
  version: v1
  contact:
    name: Andrii Kipriianov
    email: andrii.kipriianov@bertelsmann.de
servers:
- url: http://localhost:8080/api/
  description: Local server
security:
  - BearerAuth: []
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Register a new user with a username and password.
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User Bobby1991 registered successfully"
        '400':
          description: Bad request - Username already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Username already exists
  /auth/login:
    post:
      summary: Authenticate a user
      description: Authenticate a user using a username and password.
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/loginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
        '400':
          description: Bad credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bad credentials
  /employee/create:
    post:
      tags:
        - Employee API
      summary: Create a new employee
      description: |
        ONLY WITH ADMIN ACCESS.\
        In the request, for subordinates only "id" field should be filled, as it refers to an existing employee. Direct supervisor and subordinates are employees, that should already exist in the database. Department should also exist in the database. Use this endpoint when you need to create a new employee
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeRequest"
      responses:
        "201":
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/employeeRequest"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToCreateEmployee"
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToFindSubordinate"
                  - $ref: "#/components/schemas/failedToSaveSubordinate"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"

  /department/create:
    post:
      tags:
        - Department API
      operationId: createDepartment
      summary: Create a new department
      description: |
        ONLY WITH ADMIN ACCESS.\
        In the request, for employees only "id" field should be filled, as it refers to an existing employee. Employees should already exist in the database. Use this endpoint when you need to create a new department
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/departmentRequest"
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/departmentRequest"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToSaveDepartment"
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
  /employee/{id}:
    get:
      tags:
        - Employee API
      summary: Get an employee by id
      description: Employee should already exist in the database. Use this endpoint when you need to find a specific employee by id.
      operationId: showEmployee
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/employeeWithSubordinates"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/failedToFindEmployee"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
  /employee/showAll:
    get:
      tags:
        - Employee API
      operationId: showAllEmployees
      summary: Get a list of all employees
      description: Use this endpoint when you need to get all employees in the database.
      parameters:
        - $ref: './schemas/parameters/offset.yaml'
        - $ref: './schemas/parameters/limit.yaml'
        - $ref: './schemas/parameters/lead_id.yaml'
        - $ref: './schemas/parameters/manager_id.yaml'
        - $ref: './schemas/parameters/department_id.yaml'
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/employeeWithSubordinates"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
  /department/{id}:
    get:
      tags:
        - Department API
      summary: Get an department by id
      description: Department should already exist in the database. Use this endpoint when you need to find a specific department by id.
      operationId: showDepartment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Ok
          content:
            'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/departmentWithEmployees"
        "400":
          description: Bad Request
          content:
            'application/json':
              schema:
                type: object
                $ref: "#/components/schemas/failedToFindDepartment"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
  /department/showAll:
    get:
      tags:
        - Department API
      summary: Get a list of all departments
      description: Use this endpoint when you need to get all departments in the database.
      operationId: showAllDepartments
      responses:
        "200":
          description: Ok
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/departmentWithEmployees"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
  /employee/{id}/update:
    put:
      tags:
      - Employee API
      operationId: updateEmployee
      summary: Change employee by id
      description: |
        ONLY WITH ADMIN ACCESS.\
        Only specified fields will be changed, all others will remain the same.
        Employee should already exist in the database. Use this endpoint when you need to change employee by id.
      parameters:
      - name: id
        in: path
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateEmployeeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/updatedEmployee"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
                  - $ref: "#/components/schemas/wrongArgumentsPassed"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
  /employee/{id}/add/subordinates:
    put:
      tags:
        - Employee API
      operationId: addSubordinatesToEmployee
      summary: Adds a subordinate to a specific employee by id.
      description: |
        ONLY WITH ADMIN ACCESS.\
        A subordinate is an employee who reports directly to a supervisor, who is also an employee. Both the subordinate
        and the direct supervisor should already exist in the database. In the request, only the "id" field should be filled, as 
        it refers to an existing employee. Use this endpoint to assign an employee as a subordinate to another employee.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/arrayRequest"
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/employeeWithSubordinates"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToFindSubordinate"
                  - $ref: "#/components/schemas/failedToSaveSubordinate"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
  /employee/{id}/remove/subordinates:
    put:
      tags:
      - Employee API
      operationId: removeSubordinateFromEmployee
      summary: Removes a subordinate from a specific employee by id.
      description: |
        ONLY WITH ADMIN ACCESS.\
        A subordinate is an employee who reports directly to a supervisor, who is also an employee. Both the subordinate
        and the direct supervisor should already exist in the database. In the request, only the "id" field should be filled, as 
        it refers to an existing employee. If the specified subordinate is not currently assigned to the chosen supervisor,
        no changes will be made. Use this endpoint to remove an employee from being a subordinate to another employee.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/arrayRequest"
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/employeeWithNoSubordinates"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToFindSubordinate"
                  - $ref: "#/components/schemas/failedToSaveSubordinate"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
  /department/{id}/update:
    put:
      tags:
      - Department API
      operationId: updateDepartment
      summary: Change department by id
      description: |
        ONLY WITH ADMIN ACCESS.\
        Only specified fields will be changed, all others will remain the same.
        Department should already exist in the database. Use this endpoint when you need to change department by id.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateDepartmentRequest"
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/updatedDepartment"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindDepartment"
                  - $ref: "#/components/schemas/failedToSaveDepartment"
                  - $ref: "#/components/schemas/wrongArgumentsPassed"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
  /department/{id}/add/employees:
    put:
      tags:
      - Department API
      operationId: addEmployeesToDepartment
      summary: Adds an employee to a specific department by id.
      description: |
        ONLY WITH ADMIN ACCESS.\
        Both the employee and the department should already exist in the database. In the request, only the "id" field 
        should be filled, as it refers to an existing employee. Use this endpoint to add an employee to a department.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/arrayRequest"
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/departmentWithEmployees"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindDepartment"
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
                  - $ref: "#/components/schemas/failedToSaveDepartment"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
  /department/{id}/remove/employees:
    put:
      tags:
        - Department API
      operationId: removeEmployeesFromDepartment
      summary: Removes an employee from a specific department by id.
      description: |
        ONLY WITH ADMIN ACCESS.\
        Both the employee and the department should already exist in the database. In the request, only the "id" field
        should be filled, as it refers to an existing employee. If the specified employee is not currently part of the 
        chosen department, no changes will be made. Use this endpoint to remove an employee from a specific department.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/arrayRequest"
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/departmentWithNoEmployees"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindDepartment"
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
                  - $ref: "#/components/schemas/failedToSaveDepartment"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
  /employee/{id}/delete:
    delete:
      tags:
      - Employee API
      operationId: deleteEmployee
      summary: Delete an employee by id
      description: |
        ONLY WITH ADMIN ACCESS.\
        Before deleting employee from the database, make sure that it has no direct supervisor and no subordinates.
        Use this endpoint when you need to remove specific employee by id.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
          content:
            "application/json":
                schema:
                  oneOf:
                    - $ref: "#/components/schemas/failedToDeleteEmployee"
                    - $ref : "#/components/schemas/failedToFindEmployee"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
  /department/{id}/delete:
    delete:
      tags:
      - Department API
      operationId: deleteDepartment
      summary: Delete a department by id
      description: |
        ONLY WITH ADMIN ACCESS.\
        Before deleting department from the database, make sure that it has no employees.
        Use this endpoint when you need to remove specific department by id.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToDeleteDepartment"
                  - $ref: "#/components/schemas/failedToFindDepartment"
        "401":
          description: Unauthorized - Missing or invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/unauthorizedError"
        "403":
          description: Forbidden - User does not have the necessary permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/forbiddenError"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    employeeRequest:
      $ref: "./schemas/employee/employeeRequest.yaml"
    employeeWithSubordinates:
      $ref: "./schemas/employee/employeeWithSubordinate.yaml"
    employeeWithNoSubordinates:
      $ref: "./schemas/employee/employeeWithNoSubordinates.yaml"
    updatedEmployee:
      $ref: "./schemas/employee/updatedEmployee.yaml"
    updateEmployeeRequest:
      $ref: "./schemas/employee/updateEmployeeRequest.yaml"
    failedToCreateEmployee:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToCreateEmployee"
    failedToFindEmployee:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToFindEmployee"
    failedToSaveEmployee:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToSaveEmployee"
    failedToDeleteEmployee:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToDeleteEmployee"
    failedToSaveSubordinate:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToSaveSubordinate"
    failedToFindSubordinate:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToFindSubordinate"

    departmentRequest:
      $ref: "./schemas/department/departmentRequest.yaml"
    departmentWithEmployees:
      $ref: "./schemas/department/departmentWithEmployees.yaml"
    departmentWithNoEmployees:
      $ref: "./schemas/department/departmentWithNoEmployees.yaml"
    updatedDepartment:
      $ref: "./schemas/department/updatedDepartment.yaml"
    updateDepartmentRequest:
      $ref: "./schemas/department/updateDepartmentRequest.yaml"
    failedToCreateDepartment:
      $ref: "./schemas/errors/departmentErrors.yaml#/failedToCreateDepartment"
    failedToFindDepartment:
      $ref: "./schemas/errors/departmentErrors.yaml#/failedToFindDepartment"
    failedToSaveDepartment:
      $ref: "./schemas/errors/departmentErrors.yaml#/failedToSaveDepartment"
    failedToDeleteDepartment:
      $ref: "./schemas/errors/departmentErrors.yaml#/failedToDeleteDepartment"
      
    arrayRequest:
      $ref: "./schemas/shared/arrayRequest.yaml"
    wrongArgumentsPassed:
      $ref: "./schemas/errors/employeeErrors.yaml#/wrongArgumentsPassed"

    loginRequest:
      $ref: "./schemas/auth/loginRequest.yaml"
    loginResponse:
      $ref: "./schemas/auth/loginResponse.yaml"
    unauthorizedError:
      $ref: "./schemas/errors/authenticationErrors.yaml#/unauthorizedError"
    forbiddenError:
      $ref: "./schemas/errors/authenticationErrors.yaml#/forbiddenError"
