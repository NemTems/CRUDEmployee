openapi: 3.0.1
info:
  title: CATS Management Service API
  version: v1
servers:
- url: http://localhost:8080/api/
  description: Local server
paths:
  /employee/create:
    post:
      tags:
        - Employee API
      summary: Create a new employee
      description: Direct supervisor and subordinates are employees, that should already exist in the database. Department should also exist in database. Use this endpoint when you need to create a new employee
      operationId: createEmployee
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/employeeRequest"
      responses:
        "201":
          description: Created
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/employeeRequest"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToCreateEmployee"
                  - $ref: "#/components/schemas/failedToFindEmployee"

  /api/department/create:
    post:
      tags:
        - Department API
      operationId: createDepartment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/department"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/department"
  /employee/{id}:
    get:
      tags:
        - Employee API
      summary: Get an employee by id
      description: Employee should already exist in the database. Use this endpoint when you need to find a specific employee by id.
      operationId: showEmployee
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/employeeRequest"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/failedToFindEmployee"
  /employee/showAll:
    get:
      tags:
        - Employee API
      operationId: showAllEmployees
      summary: Get a list of all employees
      description: Use this endpoint when you need to get all employees in the database.
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/employeeRequest"
  /department/{id}:
    get:
      tags:
        - Department API
      summary: Get an employee by id
      description: Department should already exist in the database. Use this endpoint when you need to find a specific department by id.
        base
      operationId: showDepartment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "200":
          description: Success
        "400":
          description: Fail
  /department/showAll:
    get:
      tags:
        - Department API
      summary: Get a list of all employees
      description: Use this endpoint when you need to get all departments in the database.
        base
      operationId: showAllDepartments
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/department"
  /employee/{id}/update:
    put:
      tags:
      - Employee API
      operationId: updateEmployee
      summary: Change employee by id
      description: Employee should already exist in the database.
      parameters:
      - name: id
        in: path
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateRequestEmployee"
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/updatedEmployee"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
                  - $ref: "#/components/schemas/wrongArgumentsPassed"
  /employee/{id}/add/subordinates:
    put:
      tags:
        - Employee API
      operationId: addSubordinatesToEmployee
      summary: Adds a subordinate to a specific employee by id.
      description:
        Subordinate is an employee that is connected to it's direct supervisor which is also an employee. Subordinate and employee 
        should already exist in the database. In the request, only "id" field should be filled, as it refers to an existing employee.
        Use this endpoint when you need to add an employee as a subordinate to other employee.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/subordinates"
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/employeeWithSubordinates"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToFindSubordinate"
                  - $ref: "#/components/schemas/failedToSaveSubordinate"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
  /employee/{id}/remove/subordinates:
    put:
      tags:
      - Employee API
      operationId: removeSubordinateFromEmployee
      summary: Removes a subordinate from a specific employee by id.
      description:
        Subordinate is an employee connected to it's direct supervisor which is also an employee. Subordinate and employee
        should already exist in the database, otherwise exception will occur. In the request, only "id" field should be 
        filled, as it refers to an existing employee. If a requested subordinate is not a part of chosen employee, than no changes will happen. 
        Use this endpoint when you need to remove a subordinate from other employee.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/subordinates"
        required: true
      responses:
        "200":
          description: OK
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/employeeRequest"
        "400":
          description: Bad request
          content:
            'application/json':
              schema:
                oneOf:
                  - $ref: "#/components/schemas/failedToFindEmployee"
                  - $ref: "#/components/schemas/failedToFindSubordinate"
                  - $ref: "#/components/schemas/failedToSaveSubordinate"
                  - $ref: "#/components/schemas/failedToSaveEmployee"
  /department/{id}/update:
    put:
      tags:
      - Department API
      operationId: updateDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/department"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/department"
  /department/{id}/remove/employees:
    put:
      tags:
      - Department API
      operationId: removeEmployeesFromDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/employeeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/department"
  /department/{id}/add/employees:
    put:
      tags:
      - Department API
      operationId: addEmployeesToDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/employeeRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/department"

  /employee/{id}/delete:
    delete:
      tags:
      - Employee API
      operationId: deleteEmployee
      summary: Delete an employee by id
      description:
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
  /department/{id}/delete:
    delete:
      tags:
      - Department API
      operationId: deleteDepartment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
components:
  schemas:
    employeeRequest:
      $ref: "./schemas/employee/employeeRequest.yaml"
    employeeWithSubordinates:
      $ref: "./schemas/employee/employeeWithSubordinate.yaml"
    updatedEmployee:
      $ref: "./schemas/employee/updatedEmployee.yaml"
    updateRequestEmployee:
      $ref: "./schemas/employee/updateRequestEmployee.yaml"
    subordinates:
      $ref: "./schemas/employee/subordinates.yaml"
    department:
      $ref: "./schemas/department.yaml"
    failedToCreateEmployee:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToCreateEmployee"
    failedToFindEmployee:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToFindEmployee"
    failedToSaveEmployee:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToSaveEmployee"
    failedToSaveSubordinate:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToSaveSubordinate"
    failedToFindSubordinate:
      $ref: "./schemas/errors/employeeErrors.yaml#/failedToFindSubordinate"
    wrongArgumentsPassed:
      $ref: "./schemas/errors/employeeErrors.yaml#/wrongArgumentsPassed"

